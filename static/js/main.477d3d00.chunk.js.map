{"version":3,"sources":["logo.svg","pages/Dashboard.js","pages/Home.js","pages/Otherpage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DemoUser","DemoPerson","matchPercent","name","email","sleepPref","wakingPref","visitorPref","personalSpace","messyFloor","sharing","bio","timeInRoom","doingInRoom","SampleDataArray","PersonModal","closeModal","e","props","this","show","Modal","onHide","centered","size","Header","closeButton","Title","person","Body","Container","fluid","Row","Col","className","style","Footer","React","Component","PersonInfo","state","modalShow","showModal","setState","personData","Card","onClick","Text","defaultProps","Dashboard","Button","variant","icon","faBars","map","i","md","s","Home","Otherpage","App","to","process","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.477d3d00.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport {Container, Row, Col, Card, Button, Modal} from 'react-bootstrap'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faBars} from '@fortawesome/free-solid-svg-icons'\r\nimport '../App.scss'\r\n\r\n//The Demo User's data\r\nconst DemoUser = {\r\n    name: 'John Smith'\r\n}\r\n\r\n//Other demo person with the data\r\nconst DemoPerson = {\r\n    matchPercent: '99.23%',\r\n    name: 'Joe Mama',\r\n    email: 'joemama3241@gmail.com',\r\n    sleepPref: '3am',\r\n    wakingPref: 'Just in Time',\r\n    visitorPref: 'Only a few',\r\n    personalSpace: 'Mostly Neat',\r\n    messyFloor: '14%',\r\n    sharing: 'All my stuff is yours!',\r\n    bio: 'we chillin',\r\n    timeInRoom: 'I do be a roomrat doe',\r\n    doingInRoom: 'gamesgamesgames'\r\n}\r\n//Array filled with multiple demo people\r\nconst SampleDataArray = [DemoPerson, DemoPerson, DemoPerson, DemoPerson, DemoPerson, DemoPerson, DemoPerson]\r\n\r\n//Person Information Modal\r\nclass PersonModal extends React.Component {\r\n    closeModal = e => {\r\n        this.props.closeModal && this.props.closeModal(e)\r\n    }\r\n\r\n    render(){\r\n        if(!this.props.show){\r\n            return null\r\n        }\r\n        return(\r\n            <Modal show={this.props.show} onHide={this.closeModal} centered size=\"lg\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{this.props.person.name}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Container fluid>\r\n                        <Row>\r\n                            <Col>\r\n                                <Row className=\"mb-3\">\r\n                                    <div className='rounded-pill bg-warning text-center text-dark' style={{'width': '100px'}}>\r\n                                        <p className='my-auto'>{this.props.person.matchPercent}</p>\r\n                                    </div>\r\n                                </Row>\r\n                                <Row className=\"mb-3\">\r\n                                    Sleep Preference: {this.props.person.sleepPref} <br/>\r\n                                    Waking Preference: {this.props.person.wakingPref} <br/>\r\n                                    Visitor Preference: {this.props.person.visitorPref} <br/>\r\n                                    Personal Space: {this.props.person.personalSpace} <br/>\r\n                                    Messy Floor: {this.props.person.messyFloor} <br/>\r\n                                    Sharing: {this.props.person.sharing} <br/>\r\n                                </Row>\r\n                                <Row>\r\n                                    <strong>Time Spent in Room: </strong> &nbsp;\r\n                                    <p>{this.props.person.timeInRoom}</p>\r\n                                </Row>\r\n                                <Row>\r\n                                    <strong>What Doing in Room: </strong> &nbsp;\r\n                                    <p>{this.props.person.doingInRoom}</p>\r\n                                </Row>\r\n                            </Col>\r\n                            <Col>\r\n                                <Row className='justify-content-center mb-3'>\r\n                                    <h3 className='text-center' style={{'width': '100%'}}>{this.props.person.name}</h3>\r\n                                    <small className='text-muted'>{this.props.person.email}</small>\r\n                                </Row>\r\n                                <Row className='justify-content-center'>\r\n                                    <strong>Bio:</strong> <br /> &nbsp;\r\n                                    <p>{this.props.person.bio}</p>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer></Modal.Footer>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\n//Should pass in personData prop\r\nclass PersonInfo extends React.Component {\r\n    state = { modalShow: false }\r\n    showModal = e => {\r\n        this.setState(\r\n            { modalShow: !this.state.modalShow }\r\n        )\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <PersonModal show={this.state.modalShow} person={this.props.personData} closeModal={this.showModal}/>\r\n                <Card className='bg-primary text-white' onClick={e => {this.showModal()}}>\r\n                    <Card.Body>\r\n                        <Card.Title className='float-right'>{this.props.personData.name}</Card.Title>\r\n                        <div className='rounded-pill bg-warning text-center text-dark' style={{'max-width': '100px'}}>\r\n                            <p>{this.props.personData.matchPercent}</p>\r\n                        </div>\r\n                        <Card.Text>\r\n                            Sleep Preference: {this.props.personData.sleepPref} <br/>\r\n                            Waking Preference: {this.props.personData.wakingPref} <br/>\r\n                            Visitor Preference: {this.props.personData.visitorPref} <br/>\r\n                            Personal Space: {this.props.personData.personalSpace} <br/>\r\n                            Messy Floor: {this.props.personData.messyFloor} <br/>\r\n                            Sharing: {this.props.personData.sharing} <br/>\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//default props for person info\r\nPersonInfo.defaultProps = {\r\n    personData: { //Same info as Demo Person\r\n        matchPercent: '99.23%',\r\n        name: 'Joe Mama',\r\n        email: 'joemama3241@gmail.com',\r\n        sleepPref: '3am',\r\n        wakingPref: 'Just in Time',\r\n        visitorPref: 'Only a few',\r\n        personalSpace: 'Mostly Neat',\r\n        messyFloor: '14%',\r\n        sharing: 'All my stuff is yours!',\r\n        bio: 'we chillin',\r\n        timeInRoom: 'I do be a roomrat doe',\r\n        doingInRoom: 'gamesgamesgames'\r\n    }\r\n }\r\n\r\nfunction Dashboard() {\r\n    return (\r\n    <div>\r\n        {/**Header Content*/}\r\n        <Container fluid>\r\n            <Row>\r\n                <Col>\r\n                    <Row>\r\n                        <Col>matchTAMS</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col><h1 className='display-5'>{DemoUser.name}</h1></Col>\r\n                    </Row>\r\n                </Col>\r\n                <Col>\r\n                    <Button variant=\"outline-primary\" size='lg' className='float-right'>\r\n                        <FontAwesomeIcon icon={faBars} />\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n\r\n        {/** Main Dashboard Content*/}\r\n        <Container fluid>\r\n            <Row>\r\n                {SampleDataArray.map((person, i) => {\r\n                    return(\r\n                        <Col md='4' s='12' className='mt-3'>\r\n                            <PersonInfo personData={person} />\r\n                        </Col>\r\n                    )\r\n                })}\r\n            </Row>\r\n        </Container>\r\n    </div>)\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\n\r\nfunction Home() {\r\n    return (<div>\r\n        Welcome to our home page!\r\n    </div>)\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nfunction Otherpage() {\r\n    return (<div>\r\n        Welcome to the other page! (Not sure why this one is here)\r\n    </div>)\r\n}\r\n\r\nexport default Otherpage;","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Dashboard from './pages/Dashboard';\r\nimport Home from './pages/Home';\r\nimport Otherpage from './pages/Otherpage';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to={process.env.PUBLIC_URL + \"/\"}>Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to={process.env.PUBLIC_URL + \"/dashboard\"}>Dashboard</Link>\r\n            </li>\r\n            <li>\r\n              <Link to={process.env.PUBLIC_URL + \"/otherpage\"}>Otherpage</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n          <Route path={process.env.PUBLIC_URL + \"/dashboard\"}>\r\n            <Dashboard />\r\n          </Route>\r\n          <Route path={process.env.PUBLIC_URL + \"/otherpage\"}>\r\n            <Otherpage />\r\n          </Route>\r\n          <Route path={process.env.PUBLIC_URL + \"/\"}>\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}